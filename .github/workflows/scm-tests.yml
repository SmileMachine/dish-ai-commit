name: SCM Tests

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'src/scm/**'
      - 'src/scm/__tests__/**'
      - 'vitest.config.mts'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main ]
    paths: 
      - 'src/scm/**'
      - 'src/scm/__tests__/**'
      - 'vitest.config.mts'
      - 'package.json'
      - 'package-lock.json'

jobs:
  test:
    name: Test SCM Module
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint SCM code
      run: npm run lint -- src/scm
      continue-on-error: true
    
    - name: Run SCM unit tests
      run: npm run test src/scm/__tests__/unit -- --coverage --reporter=json --reporter=verbose
    
    - name: Run SCM integration tests
      run: npm run test src/scm/__tests__/integration -- --reporter=verbose
      continue-on-error: true
    
    - name: Run SCM e2e tests
      run: npm run test src/scm/__tests__/e2e -- --reporter=verbose
      continue-on-error: true
    
    - name: Generate coverage report
      run: npm run test src/scm -- --coverage --reporter=json --reporter=html
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage-final.json
        flags: scm
        name: scm-coverage-${{ matrix.node-version }}
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Check coverage thresholds
      run: node scripts/check-coverage-thresholds.js
      continue-on-error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml
        retention-days: 7
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const coverageFile = path.join(process.cwd(), 'coverage/coverage-summary.json');
            if (fs.existsSync(coverageFile)) {
              const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
              const { lines, functions, branches, statements } = coverage.total;
              
              const comment = `## 📊 SCM Test Coverage Report
              
| Metric | Coverage | Status |
|--------|----------|--------|
| Lines | ${lines.pct}% | ${lines.pct >= 90 ? '✅' : '❌'} |
| Functions | ${functions.pct}% | ${functions.pct >= 95 ? '✅' : '❌'} |
| Branches | ${branches.pct}% | ${branches.pct >= 85 ? '✅' : '❌'} |
| Statements | ${statements.pct}% | ${statements.pct >= 90 ? '✅' : '❌'} |

**Target Thresholds:** Lines ≥90%, Functions ≥95%, Branches ≥85%, Statements ≥90%
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not post coverage comment:', error.message);
          }

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-results-20
        path: ./artifacts
    
    - name: Quality Gate Check
      run: |
        echo "🔍 Running Quality Gate checks..."
        
        # Check if coverage files exist
        if [ ! -f "./artifacts/coverage/coverage-summary.json" ]; then
          echo "❌ Coverage report not found"
          exit 1
        fi
        
        # Run coverage threshold check
        node scripts/check-coverage-thresholds.js ./artifacts/coverage/coverage-summary.json
        
        echo "✅ Quality Gate passed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance tests
      run: |
        echo "🚀 Running SCM performance tests..."
        npm run test src/scm/__tests__/unit -- --run --reporter=json > perf-results.json
        
        # Extract test execution times
        node -e "
          const results = require('./perf-results.json');
          const slowTests = results.testResults
            .filter(test => test.duration > 1000)
            .map(test => ({ name: test.name, duration: test.duration }));
          
          if (slowTests.length > 0) {
            console.log('⚠️ Slow tests detected:');
            slowTests.forEach(test => {
              console.log(\`  - \${test.name}: \${test.duration}ms\`);
            });
          } else {
            console.log('✅ All tests completed within acceptable time');
          }
        "
      continue-on-error: true

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, quality-gate, security-scan]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Slack
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#dev-alerts'
        text: |
          🚨 SCM Tests Failed on main branch
          
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Please check the failed tests and fix them ASAP.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Create GitHub Issue on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `🚨 SCM Tests Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Test Failure Report
          
          **Branch:** ${context.ref}
          **Commit:** ${context.sha}
          **Author:** ${context.actor}
          **Workflow:** ${context.workflow}
          **Run ID:** ${context.runId}
          
          ### Failed Jobs
          - Test: ${{ needs.test.result }}
          - Quality Gate: ${{ needs.quality-gate.result }}
          - Security Scan: ${{ needs.security-scan.result }}
          
          ### Action Required
          1. Review the failed test results
          2. Fix the failing tests
          3. Ensure coverage thresholds are met
          4. Address any security issues
          
          **Workflow URL:** https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'ci-failure', 'scm']
          });    